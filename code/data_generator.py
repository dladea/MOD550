"""
2D Dataset Generator
Created on Sun Feb 2 17.52 2025

@author: Dea Lana Asri
email: dl.asri@stud.uis.no
github: dladea
"""

import json
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd


class DataGenerator():
    """Generates random data points based on the truth function with added noise."""
    def __init__(self, number_points, truth = 'sine', noise = 10, random_state = 13, degree = None):
        self.number_points = number_points
        self.truth = truth.lower()
        self.noise = noise
        self.random_state = random_state
        if degree is None:
            self.degree = [1, 2, -3, 4]
        self.degree = degree

    def generate_random_data(self):
        np.random.seed(self.random_state)
        x = np.random.randn(self.number_points)
        if self.truth == 'sine':
            y = np.sin(x)
        elif self.truth == 'cosine':
            y = np.cos(x)
        elif self.truth == 'polynomial':
            y = np.polyval(self.degree, x)
        else:
            raise ValueError("Truth not supported, please choose between 'sine', 'cosine' or 'polynomial'")
        noise = np.random.normal(np.mean(y), self.noise, self.number_points)
        y += noise
        return x, y    
    def __add__(self, other_data):
        if not isinstance(other_data, DataGenerator):
            raise ValueError('Can only add two Data_Generator instances')
        x1, y1 = self.generate_random_data()
        x2, y2 = other_data.generate_random_data()

        x_new = np.concatenate((x1, x2))
        y_new = np.concatenate((y1, y2))

        return x_new, y_new

random_points = DataGenerator(150, noise = 15, random_state=1234)
random_points2 = DataGenerator(100, truth='cosine')

x, y = random_points + random_points2

# Plot
plt.scatter(x, y, color='r')
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Random Data araound 2 Truth Functions')

# Save the plot and data
plt.savefig('../data/random_data.png')
header = 'X,Y'
data = np.column_stack((x, y))
np.savetxt('../data/random_data.csv', data, delimiter = ',', header = header, comments = '')

# Create metadata File

# Load data from the CSV
df = pd.read_csv('../data/random_data.csv') 

# Dataset information
information = {
    'Dataset Name': 'Random Data Generator Output',
    'Description': 'This dataset consists of 250 points generated by combining two distributions of random points based on sine and cosine truth functions, with random noise added to the outputs.'
}

# Basic metadata
metadata = {
    'Number of Points': df.shape[0],
    'x Range': (df['X'].min(), df['X'].max()),
    'y Range': (df['Y'].min(), df['Y'].max()),
    'Mean of x': df['X'].mean(),
    'Mean of y': df['Y'].mean(),
    'Standard Deviation of x': df['X'].std(),
    'Standard Deviation of y': df['Y'].std(),
}

# Information on how the data was generated
info_generated = {
    'X Generation': {
        'Source': 'Random values from normal distribution',
        'Formula': 'x = np.random.randn(number_points)'
    },
    'Y Generation': {
        'Truth Functions': [
            {
                'Function': 'sine',
                'Formula': 'y = np.sin(x)',
                'Number of Points': 150,
                'Random Seed': 1234,
                'Noise Level': 10
            },
            {
                'Function': 'cosine',
                'Formula': 'y = np.cos(x)',
                'Number of Points': 100,
                'Random Seed': 13,
                'Noise Level': 15
            }
        ]
    },
    'Noise Generation': {
        'Source': 'Gaussian distribution',
        'Formula': 'np.random.normal(mean of y, noise level, number of points)',
        'Effect': 'Added directly to y values'
    },
    'Data Combination': {
        'Method': 'Concatenation of two Data_Generator instances'
    }
}

metadata_summary = {
    'Dataset Information': information,
    'Statistical Summary': metadata,
    'Data Generation Information': info_generated
}

# Save as JSON file
with open('../data/random_data_metadata.json', 'w', encoding='utf-8') as file:
    json.dump(metadata_summary, file, indent=4)

print("Metadata saved successfully.")